{"ast":null,"code":"let leastMin = 61;\nlet leastSec = 61;\nlet leastMinuteArray = [];\nlet bestScore = \"00:00\";\nexport function getBestScore(array) {\n  if (array) {\n    array.split(\" \").map(item => {\n      if (Number(item.slice(0, 2)) < leastMin) {\n        leastMin = Number(item.slice(0, 2));\n      }\n    });\n    leastMinuteArray = array.split(\" \").filter(item => {\n      return Number(item.slice(0, 2)) === leastMin;\n    });\n    leastMinuteArray.map(item => {\n      if (Number(item.slice(3, 5)) < leastSec) {\n        leastSec = Number(item.slice(3, 5));\n        bestScore = item;\n      }\n    });\n    return bestScore;\n  } else {\n    return \"\";\n  }\n}","map":{"version":3,"sources":["/Users/timeless/Documents/memory-game-new/memory-game/src/helpers/getBestScore.tsx"],"names":["leastMin","leastSec","leastMinuteArray","bestScore","getBestScore","array","split","map","item","Number","slice","filter"],"mappings":"AAAA,IAAIA,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,gBAAgB,GAAG,EAAvB;AACA,IAAIC,SAAS,GAAG,OAAhB;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAAkC;AACvC,MAAIA,KAAJ,EAAW;AACTA,IAAAA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAsBC,IAAD,IAAkB;AACrC,UAAIC,MAAM,CAACD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAN,GAA2BV,QAA/B,EAAyC;AACvCA,QAAAA,QAAQ,GAAGS,MAAM,CAACD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAjB;AACD;AACF,KAJD;AAKAR,IAAAA,gBAAgB,GAAGG,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBK,MAAjB,CAAyBH,IAAD,IAAkB;AAC3D,aAAOC,MAAM,CAACD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAN,KAA6BV,QAApC;AACD,KAFkB,CAAnB;AAGAE,IAAAA,gBAAgB,CAACK,GAAjB,CAAsBC,IAAD,IAAkB;AACrC,UAAIC,MAAM,CAACD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAN,GAA2BT,QAA/B,EAAyC;AACvCA,QAAAA,QAAQ,GAAGQ,MAAM,CAACD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAjB;AACAP,QAAAA,SAAS,GAAGK,IAAZ;AACD;AACF,KALD;AAMA,WAAOL,SAAP;AACD,GAhBD,MAgBO;AACL,WAAO,EAAP;AACD;AACF","sourcesContent":["let leastMin = 61;\nlet leastSec = 61;\nlet leastMinuteArray = [];\nlet bestScore = \"00:00\";\n\nexport function getBestScore(array: any) {\n  if (array) {\n    array.split(\" \").map((item: string) => {\n      if (Number(item.slice(0, 2)) < leastMin) {\n        leastMin = Number(item.slice(0, 2));\n      }\n    });\n    leastMinuteArray = array.split(\" \").filter((item: string) => {\n      return Number(item.slice(0, 2)) === leastMin;\n    });\n    leastMinuteArray.map((item: string) => {\n      if (Number(item.slice(3, 5)) < leastSec) {\n        leastSec = Number(item.slice(3, 5));\n        bestScore = item;\n      }\n    });\n    return bestScore;\n  } else {\n    return \"\";\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}